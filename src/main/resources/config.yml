# ${project.name} main config

# If this option is enabled, this plugin will check for events which should run on the main
# thread. If this not the cause the plugin will throw an exception to inform you. Therefore
# you can detect thread-safety issues which could end up in ConcurrentModificationExceptions
# or other issues.
thread-safety-check: true

# Check periodically if a server (especially a plugin) is doing block I/O operations on the main Thread.
# Operations like SQL-, HTTP-Request, File or Socket-Connections should be performed in a separate Thread.
# If this is not the case, the server will wait for the response and therefore causes lags.
thread-block-detection: false

# This does the same as the option above, but it proves better performance. This means it can only check for
# Socket connections -> HTTP, SQL, but not for file operations
socket-block-detection: true

# This is a more efficient system as the method above (thread-block detection)
# By setting a new security manager we can receive the operations above as events and don't have
# to check it periodically.
# Warning: this may override the existing security manager which could be set by your hoster
securityMangerBlockingCheck: false

# If you see something like: "Server is performing a threading socket connection ..." and then a long list with "at .."
# It's properly one of the four features above. The last part is the stacktrace.
# This can help developers where their was running in order to find the source.
# 
# If the developer is unreachable and it's too much for you, can deactivate it here. Then you still get the warning
# but you don't see the stacktrace.
hideStacktrace: false

# Show the warning from above only once per plugin
oncePerPlugin: false

# By hooking into the network management of Minecraft we can read how many bytes
# the server is receiving or is sending.
traffic-counter: true

# If you enable this, it will save some monitoring data periodically into a MySQL database
# There you can find lag sources with a history
# And you could create a web interface for monitoring your server
monitor-database: false

# Database configuration
# Recommended is the use of MariaDB (a better version of MySQL)
host: 127.0.0.1
port: 3306
database: lagmonitor
usessl: false
username: myUser
password: myPassword
tablePrefix: 'lgm_'

# Interval is in seconds

# Containing the current TPS and a updated timestamp
tps-save-interval: 300

# Containing some monitoring information to analyze your log
monitor-save-interval: 900

# Information about your server which is good to see, but might not be really useful for finding lag sources
# For example:
#   * native
#   * Minecraft traffic counter
#   * Minecraft process specific writes and reads
native-save-interval: 1200

# A permissions independent way to whitelist certain commands
#
# Everything starts with 'whitelist-' and then the command name
#
# You can add as many commands as you want to
# If the command doesn't exist here it won't be whitelisted at all
# Everyone who has the permission for that command can then use it.
#
# Here an example for the native command:
# whitelist-native:
#     - PlayerName
#     - Example
whitelist-commandname:
    - PlayerName
    - Example


